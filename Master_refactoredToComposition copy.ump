
mixset Mixset { 
  class TemplateDefinitionWalker { 
    before Lable_Mixset_157:analyzeToken(Token,TemplateTokenAnalyzer,int)
  {
          processInlineMixset(aToken);
        }  } 
} 

mixset StateMachine { 
  class CompositeStructureTokenAnalyzer { 
    before Lable_StateMachine_156:analyzeInvariantConstraint(Token)
  {
			     else if (invariantToken.is("statemachineExpr"))
			     {
				   rawLine.addElementAll(analyzeStateMachineConstraintExpression(invariantToken,null));
			     }
			   }  } 
} 

mixset Association { 
  class CompositeStructureTokenAnalyzer { 
    before Lable_Association_155:analyzeInvariantConstraint(Token)
  {
			     else if (invariantToken.is("associationExpr"))
			     {
				   rawLine.addElementAll(analyzeAssociationConstraintExpression(invariantToken,null));
			     }
			   }  } 
} 


mixset Association { 
  class CompositeStructureTokenAnalyzer { 
    before Lable_Association_154:analyzeAssociationConstraintExpression(Token,UmpleClassifier)
  {
			  else if(sub.is("associationLit"))
			  {
				rawLine.addElementAll(analyzeAssociationLiteralConstraintExpression(sub,uClassifier,card,all,true,subject,operator));
			  }
			}  } 
} 


mixset StateMachine { 
  class CompositeStructureTokenAnalyzer { 
    before Lable_StateMachine_153:analyzeConstraint(Token,UmpleClassifier)
  {
	     else if (invariantToken.is("statemachineExpr"))
	     {
		   rawLine.addElementAll(analyzeStateMachineConstraintExpression(invariantToken,uClassifier));
	     }
	   }  } 
} 


mixset Association { 
  class CompositeStructureTokenAnalyzer { 
    before Lable_Association_152:analyzeConstraint(Token,UmpleClassifier)
  {
		else if (invariantToken.is("associationExpr"))
		{
			rawLine.addElementAll(analyzeAssociationConstraintExpression(invariantToken,uClassifier));
		}
	   }  } 
} 


mixset Mixset { 
  class UmpleInternalParser { 
    before Lable_Mixset_151:analyzeInjectionCode(Token,UmpleClassifier)
  {
      // check if the aspect needs to be injected before/after a label.
      if(codeLabelToken != null)
      injection.setInjectionlabel(codeLabelToken.getValue());
    }  } 
} 


mixset Trait { 
  class UmpleInternalParser { 
    before Lable_Trait_150:analyzeToplevelInjectionCode(Token,int,String)
  {
          for (String umpleTraitName:traitNames)
          {
            for (Method m : model.getUmpleTrait(umpleTraitName).getMethods())
            {
              methodNames.add(m.getName());
            }
          }
        }  } 
}


mixset Trait { 
  class UmpleInternalParser { 
    before Lable_Trait_149:analyzeToplevelInjectionCode(Token,int,String)
  {
              traitNames = (ArrayList<String>) mapElement.getValue();
              ArrayList<String> newTraitNames = (ArrayList<String>) traitNames.clone();
              for (String traitName : traitNames)
              {
                if (model.getUmpleTrait(traitName) == null)
                {
                  newTraitNames.remove(traitName);
                }
              } 
              traitNames = newTraitNames;
            }  } 
}


mixset FeatureModel { 
  class UmpleInternalParser { 
    before Lable_FeatureModel_148:parseMixsetNotUsedToken(Token)
  {
      //parse require statments. 
      analyzeRequireStatement(token, 2);
    }  } 
} 


mixset Association { 
  class UmpleInternalParser { 
    before Lable_Association_147:getMixsetFragmentWithEnclosingElement(Token,String)
  {
      else if (token.is("associationDefinition"))
      {
        tokenKey = "name"; 
        prefix ="association";
      }
    }  } 
} 

mixset Trait { 
  class UmpleInternalParser { 
    before Lable_Trait_146:getMixsetFragmentWithEnclosingElement(Token,String)
  {
      else if (token.is("traitDefinition"))
      {
        tokenKey = "name"; 
        prefix ="trait";
        returnMixsetBody= true;
      }
    }  } 
} 


mixset StateMachine { 
  class UmpleInternalParser { 
    before Lable_StateMachine_145:getMixsetFragmentWithEnclosingElement(Token,String)
  {
      else if (token.is("state"))
      {
        tokenKey = "stateName";
      }
      else if (token.is("inlineStateMachine"))
      {
        tokenKey =  "name";
      }
    }  } 
} 


mixset Class { 
  class UmpleInternalParser { 
    before Lable_Class_144:getMixsetFragmentWithEnclosingElement(Token,String)
  {
      if (token.is("classDefinition"))
      {
        tokenKey = "name"; 
        prefix ="class";
        returnMixsetBody= true;
      }
    }  } 
} 

mixset StateMachine { 
  class UmpleInternalParser { 
    before Lable_StateMachine_143:analyzeModelEnumInClass(UmpleClass,UmpleEnumeration)
  {   
     // Check if the class's state machines conflict with the enumeration, and if any of its state 
     // machine's events use the enumeration in their parameters
     for (StateMachine sm : uClass.getStateMachines()) {
       if (classUsesEnum) {
         if (uEnum.hasSameName(sm.getName())) {
           // Enumeration Conflicts with State Machine Error
           getParseResult().addErrorMessage(new ErrorMessage(97, 
                                                             uEnum.getPosition(), 
                                                             uEnum.getName(), 
                                                             "" + uEnum.getPosition().getLineNumber(),
                                                             sm.getName(),
                                                             uClass.getName()));
           return;
         }
       }
       for (Event e : sm.getAllEvents()) {
         for (MethodParameter p : e.getParams()) {
           if (uEnum.hasSameName(p.getType())) {
             if (!classUsesEnum && uEnum.hasSameName(sm.getName())) {
               // Enumeration Conflicts with State Machine Error
               getParseResult().addErrorMessage(new ErrorMessage(97, 
                                                                uEnum.getPosition(), 
                                                                uEnum.getName(), 
                                                                "" + uEnum.getPosition().getLineNumber(),
                                                                sm.getName(),
                                                                uClass.getName()));
               return;
             } else {
               classUsesEnum = true;
           }
         }
       }
      }
     }
    }  } 
} 

mixset StateMachine { 
  class UmpleInternalParser { 
    before Lable_StateMachine_142:postTokenClassEnumerationAnalysis(UmpleClass)
  {
      // Check if the enumeration conflicts with any state machines, and if the enumeration is used as
      // event parameters
      for (StateMachine sm : uClass.getStateMachines()) {
        if (uEnum.hasSameName(sm.getName())) {
          // Enumeration Conflicts with State Machine Error
          getParseResult().addErrorMessage(new ErrorMessage(97, 
                                                            uEnum.getPosition(), 
                                                            uEnum.getName(), 
                                                            "" + uEnum.getPosition().getLineNumber(),
                                                            sm.getName(),
                                                            uClass.getName()));
          return;
        }
        for (Event e : sm.getAllEvents()) {
          for (MethodParameter p : e.getParams()) {
            if (uEnum.hasSameName(p.getType()) && otherClass != null) {
              // Event Parameter Ambiguity Warning
              getParseResult().addErrorMessage(new ErrorMessage(103, 
                                                                uEnum.getPosition(), 
                                                                uEnum.getName(), 
                                                                "" + uEnum.getPosition().getLineNumber(),
                                                                p.getName(),
                                                                e.getName(),
                                                                sm.getName(),
                                                                otherClass.getName()));
            }
          }
        }
      }
      }  } 
}



