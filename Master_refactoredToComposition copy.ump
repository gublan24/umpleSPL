//moved from file 'Master_readyComposition.ump' but not inserted in their target features

mixset StateMachine { 
  class GeneratorHelper { 
    before Lable_StateMachine_1:postpare(UmpleModel)
  {
      postpareStateMachine(model);
    }  } 
} 

mixset Trace { 
  class GeneratorHelper { 
    before Lable_Trace_2:postpare(UmpleModel)
  {
      postpareTrace(model);
    }  } 
} 


mixset StateMachine { 
  class GeneratorHelper { 
    before Lable_StateMachine_3:postpare(UmpleClass)
  {
      postpareStateMachine(aClass);
    }  } 
} 



mixset Trace { 
  class GeneratorHelper { 
    before Lable_Trace_4:postpare(UmpleClass)
  {
      postpareTrace(aClass);
    }  } 
} 


mixset Mixset { 
  class GeneratorHelper { 
    before Lable_Mixset_5:toCode(List<CodeInjection>)
  {
	      if(inject.hasCodeLabel())
          continue;// handle the case when labels are used. // Do nothing  
        }  } 
} 


mixset RubyGeneratorIntMixset { 
  class GeneratorHelper { 
    before Lable_RubyGeneratorIntMixset_6:toCode(List<CodeInjection>)
  {
          comment = RubyGenerator.class.isInstance(generator)?"#":"//";
        }  } 
} 


//


mixset Mixset { 
  class TemplateDefinitionWalker { 
    before Lable_Mixset_157:analyzeToken(Token,TemplateTokenAnalyzer,int)
  {
          processInlineMixset(aToken);
        }  } 
} 

mixset StateMachine { 
  class CompositeStructureTokenAnalyzer { 
    before Lable_StateMachine_156:analyzeInvariantConstraint(Token)
  {
			     else if (invariantToken.is("statemachineExpr"))
			     {
				   rawLine.addElementAll(analyzeStateMachineConstraintExpression(invariantToken,null));
			     }
			   }  } 
} 

mixset Association { 
  class CompositeStructureTokenAnalyzer { 
    before Lable_Association_155:analyzeInvariantConstraint(Token)
  {
			     else if (invariantToken.is("associationExpr"))
			     {
				   rawLine.addElementAll(analyzeAssociationConstraintExpression(invariantToken,null));
			     }
			   }  } 
} 


mixset Association { 
  class CompositeStructureTokenAnalyzer { 
    before Lable_Association_154:analyzeAssociationConstraintExpression(Token,UmpleClassifier)
  {
			  else if(sub.is("associationLit"))
			  {
				rawLine.addElementAll(analyzeAssociationLiteralConstraintExpression(sub,uClassifier,card,all,true,subject,operator));
			  }
			}  } 
} 


mixset StateMachine { 
  class CompositeStructureTokenAnalyzer { 
    before Lable_StateMachine_153:analyzeConstraint(Token,UmpleClassifier)
  {
	     else if (invariantToken.is("statemachineExpr"))
	     {
		   rawLine.addElementAll(analyzeStateMachineConstraintExpression(invariantToken,uClassifier));
	     }
	   }  } 
} 


mixset Association { 
  class CompositeStructureTokenAnalyzer { 
    before Lable_Association_152:analyzeConstraint(Token,UmpleClassifier)
  {
		else if (invariantToken.is("associationExpr"))
		{
			rawLine.addElementAll(analyzeAssociationConstraintExpression(invariantToken,uClassifier));
		}
	   }  } 
} 


mixset Mixset { 
  class UmpleInternalParser { 
    before Lable_Mixset_151:analyzeInjectionCode(Token,UmpleClassifier)
  {
      // check if the aspect needs to be injected before/after a label.
      if(codeLabelToken != null)
      injection.setInjectionlabel(codeLabelToken.getValue());
    }  } 
} 


mixset Trait { 
  class UmpleInternalParser { 
    before Lable_Trait_150:analyzeToplevelInjectionCode(Token,int,String)
  {
          for (String umpleTraitName:traitNames)
          {
            for (Method m : model.getUmpleTrait(umpleTraitName).getMethods())
            {
              methodNames.add(m.getName());
            }
          }
        }  } 
}


mixset Trait { 
  class UmpleInternalParser { 
    before Lable_Trait_149:analyzeToplevelInjectionCode(Token,int,String)
  {
              traitNames = (ArrayList<String>) mapElement.getValue();
              ArrayList<String> newTraitNames = (ArrayList<String>) traitNames.clone();
              for (String traitName : traitNames)
              {
                if (model.getUmpleTrait(traitName) == null)
                {
                  newTraitNames.remove(traitName);
                }
              } 
              traitNames = newTraitNames;
            }  } 
}


mixset FeatureModel { 
  class UmpleInternalParser { 
    before Lable_FeatureModel_148:parseMixsetNotUsedToken(Token)
  {
      //parse require statments. 
      analyzeRequireStatement(token, 2);
    }  } 
} 


mixset Association { 
  class UmpleInternalParser { 
    before Lable_Association_147:getMixsetFragmentWithEnclosingElement(Token,String)
  {
      else if (token.is("associationDefinition"))
      {
        tokenKey = "name"; 
        prefix ="association";
      }
    }  } 
} 

mixset Trait { 
  class UmpleInternalParser { 
    before Lable_Trait_146:getMixsetFragmentWithEnclosingElement(Token,String)
  {
      else if (token.is("traitDefinition"))
      {
        tokenKey = "name"; 
        prefix ="trait";
        returnMixsetBody= true;
      }
    }  } 
} 


mixset StateMachine { 
  class UmpleInternalParser { 
    before Lable_StateMachine_145:getMixsetFragmentWithEnclosingElement(Token,String)
  {
      else if (token.is("state"))
      {
        tokenKey = "stateName";
      }
      else if (token.is("inlineStateMachine"))
      {
        tokenKey =  "name";
      }
    }  } 
} 


mixset Class { 
  class UmpleInternalParser { 
    before Lable_Class_144:getMixsetFragmentWithEnclosingElement(Token,String)
  {
      if (token.is("classDefinition"))
      {
        tokenKey = "name"; 
        prefix ="class";
        returnMixsetBody= true;
      }
    }  } 
} 

mixset StateMachine { 
  class UmpleInternalParser { 
    before Lable_StateMachine_143:analyzeModelEnumInClass(UmpleClass,UmpleEnumeration)
  {   
     // Check if the class's state machines conflict with the enumeration, and if any of its state 
     // machine's events use the enumeration in their parameters
     for (StateMachine sm : uClass.getStateMachines()) {
       if (classUsesEnum) {
         if (uEnum.hasSameName(sm.getName())) {
           // Enumeration Conflicts with State Machine Error
           getParseResult().addErrorMessage(new ErrorMessage(97, 
                                                             uEnum.getPosition(), 
                                                             uEnum.getName(), 
                                                             "" + uEnum.getPosition().getLineNumber(),
                                                             sm.getName(),
                                                             uClass.getName()));
           return;
         }
       }
       for (Event e : sm.getAllEvents()) {
         for (MethodParameter p : e.getParams()) {
           if (uEnum.hasSameName(p.getType())) {
             if (!classUsesEnum && uEnum.hasSameName(sm.getName())) {
               // Enumeration Conflicts with State Machine Error
               getParseResult().addErrorMessage(new ErrorMessage(97, 
                                                                uEnum.getPosition(), 
                                                                uEnum.getName(), 
                                                                "" + uEnum.getPosition().getLineNumber(),
                                                                sm.getName(),
                                                                uClass.getName()));
               return;
             } else {
               classUsesEnum = true;
           }
         }
       }
      }
     }
    }  } 
} 

mixset StateMachine { 
  class UmpleInternalParser { 
    before Lable_StateMachine_142:postTokenClassEnumerationAnalysis(UmpleClass)
  {
      // Check if the enumeration conflicts with any state machines, and if the enumeration is used as
      // event parameters
      for (StateMachine sm : uClass.getStateMachines()) {
        if (uEnum.hasSameName(sm.getName())) {
          // Enumeration Conflicts with State Machine Error
          getParseResult().addErrorMessage(new ErrorMessage(97, 
                                                            uEnum.getPosition(), 
                                                            uEnum.getName(), 
                                                            "" + uEnum.getPosition().getLineNumber(),
                                                            sm.getName(),
                                                            uClass.getName()));
          return;
        }
        for (Event e : sm.getAllEvents()) {
          for (MethodParameter p : e.getParams()) {
            if (uEnum.hasSameName(p.getType()) && otherClass != null) {
              // Event Parameter Ambiguity Warning
              getParseResult().addErrorMessage(new ErrorMessage(103, 
                                                                uEnum.getPosition(), 
                                                                uEnum.getName(), 
                                                                "" + uEnum.getPosition().getLineNumber(),
                                                                p.getName(),
                                                                e.getName(),
                                                                sm.getName(),
                                                                otherClass.getName()));
            }
          }
        }
      }
      }  } 
}


mixset Trait { 
  class UmpleInternalParser { 
    before Lable_Trait_141:postTokenModelEnumerationAnalysis
  {      
      // Check that the enumeration doesn't conflict with any traits
      for (UmpleTrait uT : model.getUmpleTraits()) {
        if (uEnum.hasSameName(uT.getName())) {
          // Enumeration Naming Conflict
          getParseResult().addErrorMessage(new ErrorMessage(96,
                                                            uEnum.getPosition(), 
                                                            uEnum.getName(), 
                                                            "" + uEnum.getPosition().getLineNumber(),
                                                            "" + uT.getPosition(0).getLineNumber()));
          return;
        }
      }
      }  } 
} 

mixset Association { 
  class UmpleInternalParser { 
    before Lable_Association_140:analyzeFilterToken(Token,int)
  {
            if(t.is("association"))
	        {
	          addAssociationValue(f,t);
          	}
          }  } 
} 


mixset Association { 
  class UmpleInternalParser { 
    before Lable_Association_139:layoutNewElements
  {
      // Layout associations
      for (int i=0; i<model.numberOfAssociations(); i++)
      {
        Association a = model.getAssociation(i);
        
        if (associationIsBetweenClassAndInterface (a)){continue;}
        if (associationIsBetweenClassAndTrait (a)){continue;}
        
        int numberOfPositions = a.numberOfPositions();

        if (numberOfPositions < 2)
        {
          Coordinate[] defaults = model.getDefaultAssociationPosition(a);
      if (defaults==null) continue;
          a.addPosition(defaults[0]);
          a.addPosition(defaults[1]);
          a.getPosition(0).setStatus(Coordinate.Status.Defaulted);
          a.getPosition(1).setStatus(Coordinate.Status.Defaulted);
        }
      }
    }  } 
} 

mixset Association { 
  class UmpleInternalParser { 
    before Lable_Association_138:analyzeLayoutToken(Token,UmpleClassifier,int)
  {
      else if (token.is("associationPosition"))
      {
        String name = token.getValue("name");
        Association assoc = model.getAssociation(name);

        if (assoc != null)
        {
          assoc.setName(name);
          for(Token position : token.getSubTokens())
          {
            if (position.is("coordinate"))
            {
              assoc.addPosition(new Coordinate(position.getIntValue("x"),position.getIntValue("y"),0,0));
            }
          }
        }
      }
    }  } 
} 


mixset Association { 
  class UmpleInternalParser { 
    before Lable_Association_137:traceItemType(Token)
  {
    // --- check if association
    for( AssociationVariable aVar : aClass.getAssociationVariables() )
    {
      if( traceToken.getValue("traceEntity").equals(aVar.getName()))
      {
        traceItemType = 3;
      }
    }

    for( Association a : aClass.getAssociations() )
    {
      if( a.getName().contains(traceToken.getValue("traceEntity") ))
      {
        traceItemType = 3;
      }
    }
    }  } 
} 



mixset StateMachine { 
  class UmpleInternalParser { 
    before Lable_StateMachine_136:traceItemType(Token)
  {
      // --- check if state machine
      for( StateMachine sVar : aClass.getStateMachines() )
      {
        if( traceToken.getValue("traceEntity").equals(sVar.getName()))
        {
          traceItemType = 2;
        }
        for( State s : sVar.getStates() )
        {
          if( traceToken.getValue("traceEntity").equals(s.getName()) || traceToken.getValue("traceEntity").equals(sVar.getName()+"."+s.getName()) )
          {
            traceItemType = 2;
          }
          for( Transition t : s.getTransitions() )
            if( traceToken.getValue("traceEntity").equals(t.getEvent().getName()))
            {
              traceItemType = 2;
            }
          // check if traced state is already found
          // no need to check nested states
          if( traceItemType == 2 ) return traceItemType;
          if(s.hasNestedStateMachines())
          {
            traceItemType = checkNestedStateMachine(traceToken.getValue("traceEntity"),s);	
          }
        }
      }
    }  } 
} 


mixset Association { 
  class UmpleInternalParser { 
    before Lable_Association_135:traceItemType(Token)
  {  
    attr = attr==null?aClass.getAssociationVariable(traceToken.getValue("traceEntity")):attr;
    }  } 
} 


mixset Association { 
  class UmpleInternalParser { 
    before Lable_Association_134:anaylzeTraceWildCard(Token)
  {
    //------------- trace all associations [wildcard]
    if( traceToken.getValue("traceEntity").toLowerCase().equals("allassociations") )
    {
      for( AssociationVariable assoc : uClass.getAssociationVariables() )
      {
      	tracedAssoc.setPosition(traceToken.getPosition());
      	tracedAssoc.addAssociationVariable(assoc);
      	tracedAssoc.setTraceAdd(true);
      	tracedAssoc.setTraceRemove(true);
      }
    }
    }  } 
} 

mixset StateMachine { 
  class UmpleInternalParser { 
    before Lable_StateMachine_133:analyzeTraceItem(Token)
  {
      if( traceItemType == 2 )
      {
        analyzeStateMachineTraceItem(traceToken);
      }
    }  } 
}

mixset Association { 
  class UmpleInternalParser { 
    before Lable_Association_132:analyzeTraceStatement(UmpleClass,Token)
  {
          attr = traceDirective.getUmpleClass().getAssociationVariable(token.getValue("LHS"));
          }  } 
} 

mixset Association { 
  class UmpleInternalParser { 
    before Lable_Association_131:analyzeTraceStatement(UmpleClass,Token)
  {
          tracedAssoc.setConstraint(constraint);
          }  } 
} 

mixset Association { 
  class UmpleInternalParser { 
    before Lable_Association_130:analyzeTraceStatement(UmpleClass,Token)
  {
    tracedAssoc = new AssociationTraceItem(traceDirective);
    }  } 
} 

mixset Trait { 
  class UmpleInternalParser { 
    before Lable_Trait_129:analyzeTransition(boolean,Token,State,String)
  {
        if (fromState.getStateMachine().getRootStateMachine().getUmpleClass()==null){
    		uClassifier = fromState.getStateMachine().getRootStateMachine().getUmpleTrait();
    	  }
      }  } 
} 


mixset Trace { 
  class UmpleInternalParser { 
    before Lable_Trace_128:populateStateMachine(Token,StateMachine,UmpleClassifier)
  {
        if(stateToken.is("trace"))
        {
          if (uClassifier instanceof UmpleClass) {
          analyzeTraceStatement((UmpleClass)uClassifier,stateToken); 
        } else {
          //TODO--- trait's functionality for trace;
        }
        }
      }  } 
}
mixset Mixset { 
  class UmpleInternalParser { 
    before Lable_Mixset_127:analyzeStateMachine(Token,UmpleClassifier)
  {
      analyzeMixsetDefinition(innerMixsetTokens, sm);
    }  } 
} 


mixset Trait { 
  class UmpleInternalParser { 
    before Lable_Trait_126:analyzeStateMachine(Token,UmpleClassifier)
  {
          if (uClassifier instanceof UmpleTrait) {
          //TODO --Trait's code
          setFailedPosition(stateMachineToken.getPosition(), 15, uClassifier.getName());
        }
      }  } 
} 

mixset Trait { 
  class UmpleInternalParser { 
    before Lable_Trait_125:analyzeStateMachine(Token,UmpleClassifier)
  {
       if (uClassifier instanceof UmpleTrait) {
    	wasSet = sm.setUmpleTrait((UmpleTrait)uClassifier);
     }
    }  } 
} 
 
 mixset Trait { 
  class UmpleInternalParser { 
    before Lable_Trait_124:analyzeStateMachine(Token,UmpleClassifier)
  {
            if (uClassifier instanceof UmpleTrait){
            sm.setUmpleTrait((UmpleTrait)uClassifier);
          } 
        }  } 
} 



mixset Trait { 
  class UmpleInternalParser { 
    before Lable_Trait_123:analyzedReferencedStateMachine(Token,UmpleClassifier)
  {
        else if (uClassifier instanceof UmpleTrait) {
          //TODO --Trait's code
          setFailedPosition(stateMachineToken.getPosition(), 15, uClassifier.getName());
        }
      }  } 
} 
mixset Trait { 
  class UmpleInternalParser { 
    before Lable_Trait_122:analyzedReferencedStateMachine(Token,UmpleClassifier)
  {
        else if (uClassifier instanceof UmpleTrait) {
        wasSet = sm.setUmpleTrait((UmpleTrait)uClassifier);
      }
    }  } 
} 


mixset Trait { 
  class UmpleInternalParser { 
    before Lable_Trait_121:analyzedReferencedStateMachine(Token,UmpleClassifier)
  {
      if (uClassifier instanceof UmpleTrait){
        sm.setUmpleTrait((UmpleTrait)uClassifier);
      }
    }  } 
} 

mixset Trait { 
  class UmpleInternalParser { 
    before Lable_Trait_120:analyzeStateMachineToken(Token,UmpleClassifier,int)
  {
      else if (uClassifier instanceof UmpleTrait) {
        if (((UmpleTrait)uClassifier).isImmutable())
        {
          //TODO--- trait's code	
            setFailedPosition(token.getPosition(), 15, uClassifier.getName());
            return;
        }	
	    }
    }  } 
}

mixset Association { 
  class UmpleInternalParser { 
    before Lable_Association_119:analyzeFIXMLextendedContentContetnt(Token)
  {
				  addAssociation(uClass, rUClass,subToken); // based-on-single-associations
				}  } 
} 
mixset Association { 
  class UmpleInternalParser { 
    before Lable_addAssociation_118:analyzeFIXMLextendedContentContetnt(Token)
  {
				  addAssociation(uClass, rUClass,subToken); // based-on-single-associations
				}  } 
} 
mixset Association { 
  class UmpleInternalParser { 
    before Lable_Association_117:analyzeFIXMLDefinition(Token)
  {
				  assignAssociationInitialValues(); // based-on-single-associations
				}  } 
} 

mixset StateMachine { 
  class UmpleInternalParser { 
    before Lable_StateMachine_116:processGTemplateParameterAssignment(Token,UmpleClassifier,String)
  {
          else if (subToken.is("StateMachineAliasName")){ 
              StateMachineTemplateSignature stTSignature = obtainStateMachineTemplateSignature(subToken);
              if (! aGeneralTPApplied.hasStateMachineTemplateSignature(stTSignature)){  
                aGeneralTPApplied.addStateMachineTemplateSignature(stTSignature);
              } else {
                getParseResult().addErrorMessage(new ErrorMessage(229,subToken.getPosition(),aGeneralTPApplied.getInheritanceName(),stTSignature.getSrcStateMachine()));
                return;
              } 
          } else if (subToken.is("iEStateMachine")){ 
              StateMachineModifier stTSignature = obtainStateMachineModifier(subToken);
              if (! aGeneralTPApplied.hasStateMachineModifier(stTSignature)){  
                aGeneralTPApplied.addStateMachineModifier(stTSignature);
              } else {
                getParseResult().addErrorMessage(new ErrorMessage(229,subToken.getPosition(),aGeneralTPApplied.getInheritanceName(),stTSignature.getSrcStateMachine()));
                return;
              } 
          } 
        }  } 
}

mixset StateMachine { 
  class UmpleInternalParser { 
    before Lable_StateMachine_115:processGTemplateParameterAssignment(Token,UmpleClassifier,String)
  {
                StateMachineTemplateSignature stTSignature = obtainStateMachineTemplateSignatureForTransitions(subToken);
                if (! aGeneralTPApplied.hasStateMachineTemplateSignature(stTSignature)){  
                  aGeneralTPApplied.addStateMachineTemplateSignature(stTSignature);
                } else {
                  getParseResult().addErrorMessage(new ErrorMessage(229,subToken.getPosition(),aGeneralTPApplied.getInheritanceName(),stTSignature.getSrcStateMachine()));
                  return;
                }
            }  } 
}

mixset AspectInjection { 
  class UmpleInternalParser { 
    before Lable_AspectInjection_114:applyTraitProperties(UmpleClass,UmpleTrait)
  {
       // copy injection codes
       for (CodeInjection cj : inTrait.getCodeInjections()) {
               cj.setUmpleClassifier(inClass);
               inClass.addCodeInjection(cj);
       }
    }  } 
}

mixset StateMachine { 
  class UmpleInternalParser { 
    before Lable_StateMachine_113:applyTraits
  {
          if (getParseResult().getWasSuccess()) copyStateMachinesFromTraiToClass(uClass);
          }  } 
}

mixset Association { 
  class UmpleInternalParser { 
    before Lable_Association_112:applyTraits
  {
            if (getParseResult().getWasSuccess()) copyAssociationsFromTraitToClass(uClass);
          }  } 
}

mixset Layout { 
  class UmpleInternalParser { 
    before Lable_Layout_111:analyzeDependentTokens(Token,UmpleTrait,int)
  {
      analyzeLayoutToken(t,inTrait,analysisStep);
    }  } 
}

mixset AspectInjection { 
  class UmpleInternalParser { 
    before Lable_AspectInjection_110:analyzeDependentTokens(Token,UmpleTrait,int)
  {
      else if (t.is("beforeCode") || t.is("afterCode"))
      {
      //TODO should applied for traits
        analyzeInjectionCode(t,inTrait);
      }
    }  } 
} 

mixset StateMachine { 
  class UmpleInternalParser { 
    before Lable_StateMachine_108:analyzeExtraCode(Token,UmpleTrait)
  {
      if(extraCodeIsMalformedStateMachine(token)) setFailedPosition(token.getPosition(), 1006, "");
    }  } 
} 



mixset Association { 
  class UmpleInternalParser { 
    before Lable_Association_107:analyzeTraitToken(Token,UmpleTrait,int)
  {
      else if (token.is("inlineAssociation"))
      {
        analyzeinlineAssociation(token,aTrait);
      }
      else if (token.is("symmetricReflexiveAssociation"))
      {
        analyzeSymmetricReflexiveAssociation(token,aTrait);
      }
    }  } 
} 



mixset Mixset { 
  class UmpleInternalParser { 
    before Lable_Mixset_106:analyzeTraitToken(Token,UmpleTrait,int)
  {
      else if (token.is("mixsetDefinition"))
      {
        analyzeMixsetBodyToken(token);
    
      }
    }  } 
} 

mixset StateMachine { 
  class UmpleInternalParser { 
    before Lable_StateMachine_66:analyzeToken(Token,UmpleClass,int)
  {
      analyzeStateMachineToken(t,aClass,analysisStep);
    }  } 
} 
