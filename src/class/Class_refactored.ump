
mixset Attribute { 
  class UmpleInternalParser { 
    before Label_Attribute_50:analyze(boolean)
  {
        mixset Method {
          checkDefaultedNameConflict();
        }
      }  } 
} 


  class UmpleInternalParser { 
    before Label_Class_53:analyzeToken(Token,int)
  {
      analyzeClassToken(t,analysisStep);
    }  
} 


mixset AspectInjection { 
  class UmpleInternalParser { 
    before Label_AspectInjection_64:analyzeToken(Token,int)
  {
      analyzeInjectionToken(t, analysisStep);
    }  } 
} 

  class UmpleInternalParser { 
    before Label_Class_65:analyzeToken(Token,UmpleClass,int)
  {
      analyzeClassToken(t,aClass,analysisStep);
    }  } 



mixset AspectInjection { 
  class UmpleInternalParser { 
    before Label_AspectInjection_68:analyzeDependentTokens(Token,UmpleClass,int)
  {
      else if (t.is("beforeCode") || t.is("afterCode"))
      {
        analyzeInjectionCode(t,aClass);
      }
    }  } 
}


  class UmpleInternalParser { 
    before Label_Class_71:postTokenAnalysis
  {
      if (getParseResult().getWasSuccess())
      {
        postTokenClassAnalysis();
      }
    }  } 
// Start

//src/generators/Generator_CodeUmple.ump
mixset Class { 
  class UmpleGenerator { 
    before Label_Class_7:initializeParser
  {
      parser.addGrammarFile("/class/umple_classes.grammar");
    }  } 
} 

mixset Mixset { 
  class UmpleInternalParser { 
    before Label_Class_144:getMixsetFragmentWithEnclosingElement(Token,String)
  {
      if (token.is("classDefinition"))
      {
        tokenKey = "name"; 
        prefix ="class";
        returnMixsetBody= true;
      }
    }  } 
}